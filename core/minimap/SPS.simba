(*
SPS ~ SRL Positioning System
============================

Concept and original work done by marpis @ SRL-Forums.  Work continued by Coh3n
and members of the SRL community.

*)

{$loadlib sps}

const
  // Path where all the SPS files are
  SPS_IMG_PATH = IncludePath + '\AeroLib\maps\';
  SPS_IMG_FMT  = '.png';

// User defined SPS global variables
var
  SPS_Debug      : boolean;
  SPS_MultiMouse : boolean; // simulates a human like "spam-click" when walking
  SPS_AnyAngle   : boolean;   // true = work at any angle; false = only north

// SPS Global variables
var
  SPS_Areas      : TStringArray;
  SPS_MergedArea : TMufasaBitmap;
  SPS_AreaMaps   : T3DIntegerArray; // Grids of the combined SPS_Areas
  SPS_Tolerance, SPS_MatchesPercent: extended;
  SPS_Accuracy   : integer; // Splits minimap/areas into squares of this side length; used for area recognition
  SPS_IsSetup    : boolean; // Used to make sure the user calls SPS_Setup

  SPS_lastLum    : Integer;
  bmpMMMask      : Integer;
  mmPercent      : Extended;

//DegreeFix
var
  DF, PrevDF: Integer;

procedure SPS_FreeMM();
begin
  freeBitmap(bmpMMMask);
end;

function SPS_GatherMinimap(): TMufasaBitmap;
var
  tpa: TPointArray;
begin
  result.init(client.getMBitmaps());
  result.copyClientToBitmap(client.getIOManager, true, 570, 9, 716, 155);

  findColorsBitmap(bmpMMMask, tpa, 0);
  result.drawTPA(tpa, 0);
end;

procedure SPS_FilterMap(var Minimap: TMufasaBitmap);
var
  W, H, x, y: integer;
begin
  W := Minimap.getWidth;
  H := Minimap.getHeight;

  for x := W - 1 downto 0 do
    for y := H - 1 downto 0 do
      if hypot(abs(90.0 - x), abs(90.0 - y)) > 90 then
      begin
        Minimap.SetPixel(X, Y, 0);
        continue;
      end;
end;

// Author: Ollybest & J J
// gets the rotated RS minimap and rotates to face north
// needed for SPS to work at any compass angle
function SPS_RotateMinimap: TMufasaBitmap;
var
  W, H: Integer;
  mmBMP, rBMP: TMufasaBitmap;
  MiddleBMP: TPoint;
begin
  try
    mmBMP := SPS_GatherMinimap();
    mmBMP.RotateBitmap(0-(Radians(((Round(getCompassAngle()) + DF) mod 360))), rBMP);
    MiddleBMP := Point(Round(rBMP.getWidth/2), Round(rBMP.getHeight/2));
    Result := rbmp.Copy(MiddleBMP.X-39, MiddleBMP.Y-39, MiddleBMP.X+39, MiddleBMP.Y+39);

    mmBMP.free;
    rbmp.free;

  except
    writeln('SPS_RotateMinimap ERROR');
  end;
end;

// Author: marpis & Coh3n
// Gets the starting area coordinates depending on the area image
procedure SPS_GetAreaCoords(Area: string; var x, y: integer);
var
  p: integer;
begin
  // if it's a specific dungeon map (i.e. name isn't 0_0, 10_2, etc.)
  if (length(getNumbers(Area)) < 2) then
  begin
    x := 0;
    y := 0;
    Exit;
  end;

  p := pos('_', Area);

  x := StrToIntDef(copy(Area, 1, p - 1), -1);
  y := StrToIntDef(copy(Area, p + 1, Length(Area) - p), -1);
end;

// Author: marpis
// Converts a point from a map piece to a point on the entire map
function SPS_LocalToGlobal(Area: string; x, y: integer): TPoint;
var
  cx, cy: integer;
begin
  SPS_GetAreaCoords(Area, cx, cy);
  Result.x := (cx * 400) + x;
  Result.y := (cy * 400) + y;
end;

// Author: marpis
// Converts a point from the entire map to a point on the main screen
function SPS_GlobalToLocal(x, y: integer): TPoint;
var
  cx, cy: integer;
begin
  cx := Floor(x / 400);
  cy := Floor(y / 400);

  Result.x := x - (cx * 400);
  Result.y := y - (cy * 400);
end;

// Author: marpis
// Returns the coordinates (x, y) in the form of a string
function SPS_AreaCoordsToString(x, y: integer): string;
begin
  Result := IntToStr(x)+'_'+IntToStr(y);
end;

// Author: Coh3n
// Returns a TPA of the areas' values
function SPS_TPAFromAreas(areas: TStringArray): TPointArray;
var
  i: integer;
begin
  setLength(result, length(areas));

  for i := 0 to high(areas) do
    SPS_GetAreaCoords(areas[i], result[i].x, result[i].y);
end;

// Author: Coh3n
// Sorts the areas by columns, and sorts each column by rows
// Example: ['1_5', '1_3', '0_5'] results ['0_5', '1_3', '1_5']
function SPS_SortAreas(areas: TStringArray): TStringArray;
var
  i, j: integer;
  tpa: TPointArray;
begin
  setLength(tpa, length(areas));

  tpa := SPS_TPAFromAreas(areas);
  clearDoubleTPA(tpa);

  sortTPAByX(tpa, true); // first sort by column number

  // then sort the Y values for each column number
  for i := 0 to high(tpa) do
    for j := i to high(tpa) do
      if (tpa[i].x = tpa[j].x) then
        if (tpa[i].y > tpa[j].y) then
          tSwap(tpa[i], tpa[j]);

  setLength(result, length(tpa));

  for i := 0 to high(tpa) do
    result[i] := SPS_AreaCoordsToString(tpa[i].x, tpa[i].y);
end;

// Author: Coh3n
// Loads the "Area" image
function SPS_GetArea(Area: string): TMufasaBitmap;
var
  x, y: integer;
  S: string;
begin
  SPS_GetAreaCoords(Area, x, y);
  result.init(client.getMBitmaps());
  result.loadFromFile(SPS_IMG_PATH + Area + SPS_IMG_FMT);
end;

// Author: Coh3n
// Merges the SPS 'areas' into one bitmap (makes more more accurate GetMyPos)
function SPS_MergeAreas(areas: TStringArray): TMufasaBitmap;
var
  i, l, x, y, diffX, diffY, newWidth, newHeight: integer;
  startPoint: TPoint;
  newAreas: TStringArray;
  xVals, yVals: TIntegerArray;
  bmpTemp: TMufasaBitmap;
  tmpTPA: TPointArray;
begin
  if (length(areas) <= 0) then
    exit;
  // sort the areas from by columns/rows; remove duplicates
  newAreas := SPS_SortAreas(areas);
  l := length(newAreas);

  // if there's only one area in the array
  if (l = 1) then
  begin
    result := SPS_GetArea(areas[0]);
    exit;
  end;

  // get the x and y values for each area
  setLength(xVals, l);
  setLength(yVals, l);

  for i := 0 to high(newAreas) do
    SPS_GetAreaCoords(newAreas[i], xVals[i], yVals[i]);

  // get the lowest Y value so we can calculate the starting point to draw the first image
  tmpTPA := SPS_TPAFromAreas(newAreas);
  sortTPAByY(tmpTPA, true);

  try
    // calculate the starting point
    // x is always 0 because of how the areas are sorted
    // y is relative to the lowest y value in the areas
    SPS_GetAreaCoords(newAreas[0], x, y);
    startPoint.x := 0;
    startPoint.y := ((y - tmpTPA[0].y) * 400);

    // draw the first area to the starting point on the bitmap
    bmpTemp := SPS_GetArea(newAreas[0]);
    result.setSize(bmpTemp.getWidth, bmpTemp.getHeight + startPoint.y);
    bmpTemp.drawTransparent(startPoint.x, startPoint.y, result);
    bmpTemp.free();

    // loop through each area, drawing them to the result bitmap
    // coordinates are calculated relative to the first area drawn (areas[0])
    for i := 0 to (l - 2) do
    begin
      diffX := (xVals[i + 1] - xVals[0]);
      diffY := (yVals[i + 1] - yVals[0]);

      newWidth := 500 + (round(abs(diffX)) * 400);
      newHeight := 500 + (round(abs(diffY)) * 400);

      // only set the size if the width or height is increasing
      if (newWidth > result.getWidth) then
        result.setSize(newWidth, result.getHeight);

      if (newHeight > result.getHeight) then
        result.setSize(result.getWidth, newHeight);

      // copy the area image to the resulting bitmap
      bmpTemp := SPS_GetArea(newAreas[i + 1]);
      bmpTemp.drawTransparent(startPoint.x + (diffX * 400 + 1),
                                  startPoint.y + (diffY * 400 + 1), result);
      bmpTemp.free();
    end;
  except
    writeln('SPS_MergeAreas ERROR');
  end;
end;

// Author: Coh3n
// Returns an SPS area of lowest x and y value. Used for calculating the
// player's correct position
function SPS_GetTopLeftCoords(areas: TStringArray): string;
var
  tpa: TPointArray;
begin
  tpa := SPS_TPAFromAreas(areas);

  if (length(tpa) <= 0) then
    exit('0_0');

  sortTPAByX(tpa, true);
  result := toStr(tpa[0].x);

  sortTPAByY(tpa, true);
  result := result + '_'+toStr(tpa[0].y);
end;

procedure SPS_AdjustTolerance();
var
  P,Pos        : TPoint;
  FoundMatches : Integer;
  Searches     : Extended;
  Minimap      : TMufasaBitmap;
  SmallMap     : T3DIntegerArray;
begin
  SPS_Tolerance := 300.0;

  if (SPS_MatchesPercent = 0.0) then
    SPS_MatchesPercent := 0.50;

  if (not SPS_IsSetup) then
  begin
    Warn('SPS_Setup was never called', WT_CORE);
    exit;
  end;

  if (not isLoggedIn()) then
    Exit;

  setCompass(0);
  Minimap := SPS_GatherMinimap();
  SPS_FilterMap(Minimap);
  SPS_BitmapToMap(Minimap, SPS_Accuracy, SmallMap);

  while (SPS_Tolerance < 400) do
  begin
    FoundMatches := SPS_FindMapInMap(P.x, P.y, SPS_AreaMaps, SmallMap, SPS_Tolerance);
    Searches     := ((Minimap.getWidth / SPS_Accuracy) * (Minimap.getHeight / SPS_Accuracy));
    mmPercent    := (FoundMatches / Searches);
    if (mmPercent > 0.50) then
      Pos := SPS_LocalToGlobal(SPS_GetTopLeftCoords(SPS_Areas),
                                  P.x * SPS_Accuracy + round(Minimap.getWidth / 2),
                                  P.y * SPS_Accuracy + round(Minimap.getWidth / 2));

    if (not pointsMatch(Pos, point(-1,-1)) and
        not pointsMatch(Pos, point(0,0))) then
    begin
      Minimap.Free;
      Warn('SPS tolerance set to '+toStr(SPS_Tolerance), WT_CORE);
      exit;
    end;

    SPS_Tolerance := (SPS_Tolerance+10.0);
  end;
  Minimap.Free;
end;

// Author: marpis & SRL Community
function SPS_GetMyPos(): TPoint;
var
  P            : TPoint;
  a,i,
  FoundMatches : Integer;
  Searches     : Extended;
  Minimap      : TMufasaBitmap;
  LumArray     : TIntegerArray;
  SmallMap     : T3DIntegerArray;
begin
  Result    := Point(-1, -1);
  LumArray  := [SPS_lastLum,0,5,-5,10,-10,15,-15,20,-20,30,-30];

  if (not SPS_IsSetup) then
  begin
    warn('SPS_Setup was never called', WT_CORE);
    exit;
  end;

  if (not isLoggedIn()) then
    Exit;

  if (SPS_Tolerance < 1.0) then
    SPS_Tolerance := 300.0;

  if (SPS_MatchesPercent = 0.0) then
    SPS_MatchesPercent := 0.50;

  For i:=0 to High(LumArray) do
  begin
    setCompass(0);
    Minimap := SPS_GatherMinimap();

    SPS_FilterMap(Minimap);
    Minimap.Brightness(LumArray[i]);
    SPS_BitmapToMap(Minimap, SPS_Accuracy, SmallMap);

    FoundMatches := SPS_FindMapInMap(P.x, P.y, SPS_AreaMaps, SmallMap, SPS_Tolerance);
    Searches     := ((Minimap.getWidth / SPS_Accuracy) * (Minimap.getHeight / SPS_Accuracy));
    mmPercent    := (FoundMatches / Searches);
    Minimap.Free;

    if (mmPercent > SPS_MatchesPercent) then
    begin
      if not (SPS_lastLum = LumArray[i]) then
      begin
        warn('SPS map brightness set to: '+toStr(LumArray[i]), WT_CORE);
        SPS_lastLum := LumArray[i];
      end;
      Result := SPS_LocalToGlobal(SPS_GetTopLeftCoords(SPS_Areas),
                                  P.x * SPS_Accuracy + round(Minimap.getWidth / 2),
                                  P.y * SPS_Accuracy + round(Minimap.getWidth / 2));
      incEx(result.X, 74);
      incEx(result.Y, 74);
    end;

    if (not pointsMatch(Result, point(-1,-1)) and
        not pointsMatch(Result, point(0,0))) then
      exit(result);
  end;

  Warn('Adjusting SPS_Tolerance...', WT_CORE);
  SPS_AdjustTolerance();
end;

// Author: marpis
// Finds position P in minimap by checking your own location
function SPS_PosToMM(P: TPoint): TPoint;
var
  MyPos: TPoint;
begin
  if not isLoggedIn() then
    Exit;

  Result := Point(-1, -1);
  MyPos  := SPS_GetMyPos();

  if (Distance(MyPos.X, MyPos.Y, P.X, P.Y) < 60) then
    Result := RotatePoint(Point(MMCX + P.X - MyPos.X, MMCY + P.Y - MyPos.Y), 0-getCompassRadians(), MMCX, MMCY);
end;

// Author: marpis
// Walks to position, P.
function SPS_WalkToPos(P: TPoint): boolean;
var
  MM: TPoint;
begin
  if not isLoggedIn() then
    Exit(False);

  MM := SPS_PosToMM(P);

  if (MM.X > 0) then
  begin
      Mouse(MM, 0, 0, MOUSE_LEFT);

    if waitFunc(@isPlayerWalking, 1, 3000 + random(500)) then
      while isPlayerWalking() do
        wait(1);

    Result := True;
  end;
end;

Function SPS_WalkPath(Path: TPointArray; WaitForStop: Boolean): boolean;
var
  T : Timer;
  I,H,D,Fails,lP: integer;
  P,MM,MMF: TPoint;
begin
  colorToleranceSpeed(1);
  H     := High(Path);
  Fails := 0;
  lP    := 0;

  T.start();
  while (not Result) and (T.timeElapsed < (10000 + random(2000))) and (Fails < 5) do
  begin
    try
      if (not isLoggedIn()) then
        Exit(false);
    except
    end;

    P := SPS_GetMyPos();

    for I := H downto 0 do
    begin
      if ((I - lP) > 3) then
        Continue
      else
        lP := I;

      MM := Point(MMCX + Path[I].X - P.X, MMCY + Path[I].Y - P.Y);

      if ((MM.X = MMF.X) and (MM.Y = MMF.Y)) then
        Inc(Fails);

      D := Distance(MM.X, MM.Y, MMCX, MMCY);

      if (D < 10) then
        break
      else
        if (D < 65) then
        begin
          missMouse(MM, 0, 0);
          fastClick(MOUSE_LEFT);
          waitFunc(@isPlayerWalking, 10, 500);
          MMF := MM;
          if (I = H) then
          begin
            FFlag(5);
            if WaitForStop then
              while isPlayerWalking() do
                waitEx(1);
          end else
            FFlag(25);
          T.start();
 	        Break;
        end;
    end;

    Result := (I = H);
  end;
  FFlag(5);
end;

function SPS_BlindWalk(P: TPoint; WaitForStop: Boolean): Boolean;
var
  Tries: Integer;
  M: TPoint;
  ctrlPoints: TPointArray;
begin
  result := false;
  repeat
    if (not isLoggedIn()) then
      Exit;

    M := SPS_GetMyPos();

    if ((M.X = -1) and (M.Y = -1)) then
      Exit(false);

    if (Length(ctrlPoints) = 0) then
      ctrlPoints := TPABetweenPoints(M, P, 20 + Random(10), 5);

    Inc(Tries);
    if (Tries > 20) then
      Exit;

    Result := SPS_WalkPath(ctrlPoints, WaitForStop);
  until(Result);
end;

// Author: Coh3n
// Sets up SPS; needs to be called if you want to switch RS surfaces
function SPS_Setup(areas: TStringArray): boolean;
var
  tmp: TMufasaBitmap;
begin
  DF     := 0;
  PrevDF := 0;

  bmpMMMask := BitmapFromString(147, 147, 'meJzt3V1u01AYBuHsf8kQCqqQ' +
        'UmiC4/jnzJkyzwo+v3PhG0u+XL6On4vo6/5ry2n2oJ/sazqvVwXPM' +
        'LJXBfdje92j95gd3ec5eqG50DW2oDeD0fPvRe8HoCc/Er3lOPTSx6' +
        'MXPR098LnodU9BjzoOvfRh6CEZ9Op70fuR6O23o5fj0QVeRg82F7r' +
        'GWvROM6KbPEcvNC+6zBJ6m9nRfR6gJzGhW32gl/Chi72jN7CqmlfV' +
        'vKrmVTWvwklVzatqXlXzqppX4aSq5lU1r6p5FU6qal6Fk6qaV+Gkq' +
        'uZVNa/CSVXNq3BSVfMqnFThpKrmVTipwklVzatwUoWTKpxU1bwKJ1' +
        'U4qapJFU6qcEa94KQKJ1U4qcJJFU6qcFKFkyqcVOGkCidVOKnCSRV' +
        'Oqk8XjC5/o8/JWoWTKpxU4aQKJ1U4qcsd+qI8d1+tcAqFkyqcVOGk' +
        'CidVOKmH4Wo3uX9VK9zkCie1EK5201quVrhpFU7qabjaTWhNtcJNq' +
        'HBbvL3RF/TfgS1+XK/sAeurFe5P12/f2QNeCle7Gzbcq9UKd6MLVz' +
        'vctmqFw20OVzvQnmq1o+yvVrvxjqpWuMEODFe7YY6tVrsxzqhWu7O' +
        'dV618JxmQrHaHG1mtdkcZX618O4HJbugNfOhin9F7zI7u8wQ9z4zo' +
        'JmvRO82FrvEyejAeXWA7ejkSvf0B6AlHo/c+Er3lOPTSp6BHPRe97' +
        'unogY9HLzoOvfSR6C0B9OR70fuR6O23o5ebAh3hNfRac6FrrEXvNC' +
        'O6yXP0QvOiyyyht5kd3ecxehUHutJn9B4mdKsP9BI+dLF39AZWVfO' +
        'qmlfVpAonVTivqkkVTqpwXlXzqppaybyq9tsv47Li7Q==');

  addOnTerminate('SPS_freeMM');
  setLength(SPS_AreaMaps, 0);
  setLength(SPS_Areas, 0);
  SPS_Accuracy := 3;

  if (length(areas) > 0) then
  begin
    tmp := SPS_MergeAreas(areas); // combine the SPS areas into 1; makes for a more accurate read
    SPS_IsSetup := true;
    result      := true;

    SPS_BitmapToMap(tmp, SPS_Accuracy, SPS_AreaMaps);
    SPS_Areas := areas;

    tmp.free();

  end else
    writeln('SPS_Setup(): ERROR: SPS areas are not set!');
end;
