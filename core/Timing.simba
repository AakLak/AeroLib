(*
Timing
======

The Timing include contains a lot of timing related functions.

.. contents::

*)
//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--               Â» Timing Routines                             --//
//-----------------------------------------------------------------//
// * function msToTime(MS, StrType: Integer): string;              // by ZephyrsFury, Nava2, and Rasta Magician
// * function timeRunning(): String;                                 // by Rasta Magician
// * function theTime() : string;                                    // by RsN
// * function theDate(DateFormat : Integer) : String;              // by Ron & Nava2
// * function waitOptionMulti(S: TStringArray; Time: Integer): Boolean; // by Marpis, N1ke! & Rasta Magician
// * function waitOption(S: String; Time: Integer): Boolean;       // by N1ke!
// * function waitUptextMulti(S: TStringArray; Time: integer): Boolean; // by Marpis & N1ke!
// * function waitUptext(S: String; Time: Integer): Boolean;       // by N1ke!
// * function waitInvMaxCount(Count, MaxTime: integer): boolean;   // by Rasta Magician
// * function waitInvMinCount(Count, MaxTime: integer): boolean;   // by Rasta Magician
// * function waitColor(x, y, Color, Tol, MaxTime: integer): Boolean; // by Rasta Magician, fixed by TRiLeZ
// * function waitFindColor(var x, y: integer; x1, y1, x2, y2, Color, Tol, MaxTime: integer): boolean; // by Rasta Magician, fixed by TRiLeZ
// * function waitColorCount(x1, y1, x2, y2, Color, Tol, MinCount, MaxCount, MaxTime: integer):boolean; // by Rasta Magician
// * function waitColorGone(Color, x, y, Tol, MaxTime: integer): Boolean; // by TRiLeZ
// * function waitColorGoneIn(Colour, x1, y1, x2, y2, Tol, MaxTime: integer): Boolean; // by TRiLeZ

const
  TIME_FORMAL = 0;
  TIME_SHORT  = 1;
  TIME_ABBREV = 2;
  TIME_BARE   = 3;
  TIME_FSTOP  = 4;

  DATE_FORMAL = 1;
  DATE_MONTH  = 2;
  DATE_DAY    = 3;

{ const srl_MaxWaitTime;
  Description: Used when ever WaitFunc is used in SRL. Increase for slow computers. }
  srl_MAXWAITTIME = 400;

(*
MsToTime
~~~~~~~~

.. code-block:: pascal

    function MsToTime(MS, StrType: Integer): string;

Takes MS in milliseconds and outputs a string with hours, mins and
seconds. Different styles can be created with different StrType values:
Str Type:

    -  Time_Formal: 2 Hours, 47 Minutes and 28 Seconds
    -  Time_Short: 02h, 47m, 28s
    -  Time_Abbrev: 2 hr, 47 min, 28 sec
    -  Time_Bare: 02:47:28
    -  Time_FStop: 12.04.40

.. note::

  by Zephyrsfury, Nava2 and Rasta Magician.

Example:

.. code-block:: pascal

*)
function msToTime(MS, TheType: Integer): string;
var
  STA: array [0..4] of TVariantArray;
  Time: array [0..2] of Integer;
  i: Integer;
begin
  Result := '';
  if (not(InRange(TheType, 0, High(STA)))) then
  begin
    Writeln('MsToTime', 'TheType: ''' + IntToStr(TheType) + ''' is not a valid value. Using Time_Bare.');
    TheType := Time_Bare;
  end;
  STA[Time_Formal] := [' Hours, ', ' Minutes and ', ' Seconds', False, 0];
  STA[Time_Short] := ['h ', 'm ', 's', False, 2];
  STA[Time_Abbrev] := [' hr ', ' min ', ' sec', False, 0];
  STA[Time_Bare] := [':', ':', '', True, 2];
  STA[Time_FStop] := ['.', '.', '', True, 2];
  ConvertTime(MS, Time[0], Time[1], Time[2]);
  for i := 0 to 2 do
    if (Time[i] > 0) or (STA[TheType][3]) or (i = 2) then
      Result := Result + PadZ(IntToStr(Time[i]), STA[TheType][4]) + STA[TheType][i];
end;

{
procedure ConvertTime64(timeMS: int64; var YEAR, MONTH, WEEK, DAY, HOUR, MINUTE, SECOND:integer);
var
  x: int64;
begin
  x := timeMS;
  YEAR   := x div (31536000000); // 1000 * 60 * 60 * 24 * 365 (1 year or 365 days)
  x      := x mod (31536000000);
  MONTH  := x div (2592000000); // 1000 * 60 * 60 * 24 * 30 (1 month or 30 days)
  x      := x mod (2592000000);
  WEEK   := x div (604800000); // 1000 * 60 * 60 * 24 * 7 (1 week or 7 days)
  x      := x mod (604800000);
  DAY    := x div (86400000); // 1000 * 60 * 60 * 24 (1 day or 24 hours)
  x      := x mod (86400000);
  HOUR   := x div (3600000); // 1000 * 60 * 60 (1 hour or 60 minutes)
  x      := x mod (3600000);
  MINUTE := x div (60000); // 1000 * 60 (1 minute or 60 seconds)
  x      := x mod (60000);
  SECOND := x div (1000); // 1000 (1 second, is in MS format now)
  x      := x mod (1000);
end;
}

(*******************************************************************************
** An edited version of the MsToTime include function.  This redone version of
**   the method has the following changes:
**      - single arg of an int64 type
**      - removed a boolean element in the STA : TVariantArray;
**      - removed the multiple output formats (array of STA, to simly one STA
*******************************************************************************)
function msToTime64(MS: int64): string;
var
  STA: TVariantArray;
  Time: array [0..6] of Integer;
  i: Integer;
begin
  Result := '';
  STA := [' Years, ', ' Months, ', ' Weeks, ', ' Days, ', ' Hours, ',
          ' Minutes and ', ' Seconds', 0];
  ConvertTime64(MS, Time[0], Time[1], Time[2], Time[3], Time[4], Time[5], Time[6]);
  for i := 0 to 6 do
    if (Time[i] > 0) or (STA[7]) or (i = 6) then
      Result := Result + PadZ(IntToStr(Time[i]), STA[7]) + STA[i];
end;

(*
timeRunning
~~~~~~~~~~~

.. code-block:: pascal

    function timeRunning(): String;

Returns Time since the script was started (GetTimeRunning).

.. note::

  by Rasta Magician.

Example:

.. code-block:: pascal

*)
function timeRunning(): string;
begin
  Result := msToTime(getTimeRunning(), TIME_FORMAL);
end;

(*
TheTime
~~~~~~~~

.. code-block:: pascal

    function theTime(FullTime : boolean) : string;

Returns current time as a string
FullTime = True will return in 24 hours rather than 12 hours

.. note::

  by RsN (fixed by Ron and Markus)

Example:

.. code-block:: pascal

*)
function theTime(): string;
var
  Hour, Mins, Sec, MSec: Word;
  PAM: string;
begin
  DecodeTime(Now, Hour, Mins, Sec, MSec);
  PAM := 'AM';
  if (Hour > 12) then
  begin
    Hour := Hour - 12;
    PAM := 'PM';
  end else if (Hour = 12) then
    PAM := 'PM'
  else if (Hour = 0) then
    Hour := 12;
  Result := (Padz(IntToStr(Hour), 2) + ':' + Padz(IntToStr(Mins), 2) + ':' + Padz(IntToStr(Sec), 2) + ' ' + PAM);
end;

(*
TheDate
~~~~~~~

.. code-block:: pascal

    function theDate(DateFormat : Integer) : String;

TheDate will return the current date. DateFormats can be:

    -   Date_Formal = April 2nd, 2007  Month Day, Year
    -   Date_Month  = 04/02/07         Month/Day/Year
    -   Date_Day    = 02-04-07         Day-Month-Year

.. note::

  by Ron, Nava2 & Narcle

Example:

.. code-block:: pascal

*)
function theDate(DateFormat: Integer): string;
var
  Year, Month, Day: Word;
  D: string;
  Mnths, sfx: TStringArray;
begin
  DecodeDate(Date, Year, Month, Day);
  Mnths := ['January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', 'December'];
  sfx := ['st', 'nd', 'rd'];
  case DateFormat of
    1:
      begin
        if InRange(Day mod 10, 1, 3) and not InRange(Day, 11, 13) then
          D := sfx[(Day mod 10)-1]
        else
          D := 'th';
        Result := Mnths[Month - 1] + ' ' + IntToStr(Day) + D +', ' + IntToStr(Year);
      end;
    2: Result := Padz(IntToStr(Month), 2) + '/' + Padz(IntToStr(Day), 2) + '/' + Copy(IntToStr(Year), 3, 4);
    3: Result := Padz(IntToStr(Day), 2) + '-' + Padz(IntToStr(Month), 2) + '-' + Copy(IntToStr(Year), 3, 4);
  else
    Writeln('TheDate', 'DateFormat can only be 1, 2, or 3!');
  end;
end;

(*
WaitFuncEx
~~~~~~~~~~

.. code-block:: pascal

    function WaitFuncEx(Func: string; var Args: TVariantArray; WaitPerLoop, MaxWait: integer): boolean;

Calls Func with arguments Args every WaitPerLoop milliseconds for a max of
MaxWait milliseconds. Func can return any basic types (boolean, string,
integer). Boolean: Returns it. String: Returns true if string equals 'true'.
Integer: Returns true unless it equals 0.

.. note::

  by Dgby714

Example:

.. code-block:: pascal

  var
    V: TVariantArray;
  begin
    V := [0, 0, 16711680, 4, 4, 500, 500];
    WriteLn(WaitFuncEx('FindColorEx', V, 10 + Random(15), 1000));
  end.
*)
function waitFuncEx(Func: string; var Args: TVariantArray; WaitPerLoop, MaxWait: integer): boolean;
var
  T: Timer;
  Temp: variant;
begin
  T.start();
  while (T.timeElapsed() < MaxWait) do
  begin
    //Temp := CallProc(Func, Args);
    Temp := VariantInvoke(Func, Args);
    if (not VariantIsString(Temp)) then
      Temp := ToStr(Temp);
    if StrToBoolDef(Temp, False) then
      Exit(True);
    Wait(WaitPerLoop);
  end;
end;

(*
WaitFunc
~~~~~~~~

.. code-block:: pascal

    function WaitFunc(Func: Function: Boolean; WaitPerLoop, MaxTime: Integer): Boolean;

Waits for function Func to be true. WaitPerLoop is how often you
want to call "Func" function.
Example: "waitFunc(@BankScreen, 10 + Random(15), 750);" will check if BankScreen
is open every 10-25th millisecond, for a maximum of 750 milliseconds.
Notice the '@'.

.. note::

  by Rasta Magician, small edit by EvilChicken!

Example:

.. code-block:: pascal

*)
function waitFunc(Func: function: Boolean; WaitPerLoop, MaxTime: Integer): Boolean;
var
  T: Timer;
begin
  T.start();
  while (T.timeElapsed < MaxTime) do
  begin
    if (Func()) then
      Exit(True);
    Wait(WaitPerLoop);
  end;
end;

(*
waitColor
~~~~~~~~~

.. code-block:: pascal

    function waitColor(x, y, Color, Tol, MaxTime: integer): Boolean;

Waits for a color at (x, y) with tolerance Tol, returns true if found

.. note::

  by Rasta Magician, fixed by TRiLeZ

Example:

.. code-block:: pascal

*)
function waitColor(X, Y, Color, Tol, MaxTime: Integer): Boolean;
var
  T: Timer;
begin
  Result := False;
  if tol = 0 then tol := 1;
  T.start();
  while T.timeElapsed < MaxTime do
  begin
    if cs_similarColors(getColor(X, Y), Color, Tol, cs_CTS1) then
      Exit(True);
    Wait(5 + Random(6));
  end;
end;

(*
waitFindColor
~~~~~~~~~~~~~

.. code-block:: pascal

    function waitFindColor(var X, Y: Integer; Color, Tol: Integer; Area: TBox; MaxTime: Integer): Boolean;

Waits for a color at (x, y) with tolerance Tol, returns true if found

.. note::

  by Rasta Magician, fixed by TRiLeZ

Example:

.. code-block:: pascal

*)
function waitFindColor(var X, Y: Integer; Color, Tol: Integer; Area: TBox; MaxTime: Integer): Boolean;
var
  T: Timer;
begin
  Result := False;
  T.start();
  while T.timeElapsed < MaxTime do
  begin
    if cs_findColorTolerance(X, Y, Color, Tol, Area, cs_CTS1) then
      Exit(True);
    Wait(10 + Random(6));
  end;
end;

(*
waitFindColors
~~~~~~~~~~~~~~

.. code-block:: pascal

    function waitFindColors(var TPA: TPointArray; Color, Tol: Integer; Area: TBox; MaxTime: Integer): Boolean;

Waits for a color at (x, y) with tolerance Tol, returns true if found

.. note::

  by IceFire908 based completely off WaitFindColor

Example:

.. code-block:: pascal

*)
function waitFindColors(var TPA: TPointArray; Color, Tol: Integer; Area: TBox; MaxTime: Integer): Boolean;
var
  T: Timer;
begin
  Result := False;
  T.start();
  while T.timeElapsed do
  begin
    cs_findColorsTolerance(TPA, Color, Tol, Area, cs_CTS1);
    if (Length(TPA) > 0) then
      Exit(True);
    Wait(10 + Random(6));
  end;
end;

(*
waitColorCount
~~~~~~~~~~~~~~

.. code-block:: pascal

    function waitColorCount(Color, Tol: Integer; Area: TBox; MinCount, MaxCount, MaxTime: integer):boolean;

Waits Color count in box (x1, y1, x2, y2) with Tol

.. note::

  by Rasta Magician

Example:

.. code-block:: pascal

*)
function waitColorCount(Color, Tol: Integer; Area: TBox; MinCount, MaxCount, MaxTime: integer):boolean;
var
  T: Timer;
  TPA: TPointArray;
begin
  Result := False;
  T.start();
  while T.timeElapsed < MaxTime do
  begin
    if cs_findColorsTolerance(TPA, Color, Tol, Area, cs_CTS1) then
      if InRange(Length(TPA), MinCount, MaxCount) then
        Exit(True);
    Wait(15 + Random(10));
  end;
end;

(*
waitColorGone
~~~~~~~~~~~~~

.. code-block:: pascal

    function waitColorGone(Color, x, y, Tol, MaxTime: integer): Boolean;

Waits until a colour is gone at (x, y) with tolerance and a timeout.
Results true if the colour disappeared at (x, y) within the time cap.

.. note::

  by TRiLeZ

Example:

.. code-block:: pascal

*)
function waitColorGone(Color, x, y, Tol, MaxTime: integer): Boolean;
var
  T: Timer;
begin
  Result := False;
  if Tol = 0 then Tol := 1;
  T.start();
  while T.timeElapsed < MaxTime do
  begin
    if (not cs_similarColors(getColor(X, Y), Color, Tol, cs_CTS1)) then
      Exit(True);
    Wait(10);
  end;
end;

(*
waitColorGoneIn
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function waitColorGoneIn(Color, Tol: Integer; Area: TBox; MaxTime: integer): Boolean;

Waits until a colour is gone in an area with tolerance and a timeout.
Results true if the colour disappeared in the area within the time cap.

.. note::

  by TRiLeZ

Example:

.. code-block:: pascal

*)
function waitColorGoneIn(Color, Tol: Integer; Area: TBox; MaxTime: integer): Boolean;
var
  T: Timer;
  CX, CY: Integer;
begin
  Result := False;
  if Tol = 0 then Tol := 1;
  T.start();
  while T.timeElapsed < MaxTime do
  begin
    if (not cs_findColorTolerance(cx, cy, Color, Tol, Area, cs_CTS1)) then
      Exit(True);
    Wait(10);
  end;
end;

(*
waitFindDTMEx
~~~~~~~~~~~~~

.. code-block:: pascal

    function waitFindDTM(DTM: integer; var x, y: integer; Area: TBox; WaitPerLoop, MaxTime: integer): boolean;

waits 'waitTime' for the 'DTM' to be found.  If found, returns true and the
DTM's coodinates in x and y.

.. note::

    Author: Coh3n
    Last Modified: Mar. 8th, 2012 by beginner5

Example:

.. code-block:: pascal

    if (waitFindDTM(dtmHatchet, x, y, Area_Inv, 5000)) then
      mouse(Point(x,y), 5, 5, mouse_Left);
*)
function waitFindDTM(DTM: integer; var x, y: integer; Area: TBox; WaitPerLoop, MaxTime: integer): boolean;
var
  T: Timer;
begin
  T.start();

  while T.timeElapsed < MaxTime do
  begin
    if (cs_findDTM(DTM, x, y, Area, cs_CTS1)) then
      Exit(True);
    wait(WaitPerLoop);
  end;
end;
