{
===========
GroundItems
===========
}


type TGroundItem = record
    Name      : string;       // Ground item name
    PrimeCol  : TColEx;       // Primary color of the ground item
    SecondCol : TColEx;       // Secondary (outter)  color of the ground item
    MinCount  : Integer;      // Minimum color count (Primary color)
    Height    : Integer;      // Ground item height (Y axis)
    Width     : Integer;      // Ground item width (X axis)
    SizeTol   : Integer;      // Size tolerance for height and length
end;

Const
  PATH_GIDB = IncludePath+'AeroLib/entities/items/GroundItemDB.txt';

Var
  LoadedGIList : Array of TGroundItem;

procedure TGroundItem.create(_Name: string;  _MainCol,_SecondCol: TColEx;
  _MinCount, _Height, _Width, _SizeTol: Integer);
begin
  Self.Name      := _Name;
  Self.PrimeCol  := _MainCol;
  Self.SecondCol := _SecondCol;
  Self.MinCount  := _MinCount;
  Self.Height    := _Height;
  Self.Width     := _Width;
  Self.SizeTol   := _SizeTol;
end;

procedure TGroundItem.create(_Name: string; _MainCol: TColEx; _MinCount,
  _Height, _Width, _SizeTol: Integer); overload;
begin
  Self.Name      := _Name;
  Self.PrimeCol  := _MainCol;
  Self.SecondCol := NULL_TColEx;
  Self.MinCount  := _MinCount;
  Self.Height    := _Height;
  Self.Width     := _Width;
  Self.SizeTol   := _SizeTol;
end;

function TGroundItem.doesExist(): Boolean;
var
  i : Integer;
begin
  for i:=0 to high(LoadedGIList) do
    if (LoadedGIList[i].Name = Self.Name) then
      Exit(True);
end;

procedure TGroundItem.saveToDB(Force: Boolean);
var
  sIndex    : String;
  tmpP,tmpS : TColEx;
  i,h,count : integer;
begin
  if not Force then
    if Self.doesExist() then
    begin
      warn('TGroundItem ('+Self.Name+') already exists', WT_CORE);
      Exit;
    end;

// Check if index already exists
  sIndex := readINI('GroundItemDB_Main', 'Count', PATH_GIDB);

// Increase total count
  sIndex := toStr(strToInt(sIndex)+1);
  writeINI('GroundItemDB_Main', 'Count', sIndex, PATH_GIDB);

// Write ground item name & MenuText
  writeINI('GI_'+sIndex, 'Name', Self.Name, PATH_GIDB);
// Append TGroundItem type
  tmpP := Self.PrimeCol;
  tmpS := Self.SecondCol;
// GI primary color
  writeINI('GI_'+sIndex, 'PCol', toStr(tmpP.Col), PATH_GIDB);
  writeINI('GI_'+sIndex, 'PTol', toStr(tmpP.Tol), PATH_GIDB);
  writeINI('GI_'+sIndex, 'hModP', toStr(tmpP.hMod), PATH_GIDB);
  writeINI('GI_'+sIndex, 'sModP', toStr(tmpP.sMod), PATH_GIDB);
// GI secondary color
  writeINI('GI_'+sIndex, 'SCol', toStr(tmpS.Col), PATH_GIDB);
  writeINI('GI_'+sIndex, 'STol', toStr(tmpS.Tol), PATH_GIDB);
  writeINI('GI_'+sIndex, 'hModS', toStr(tmpS.hMod), PATH_GIDB);
  writeINI('GI_'+sIndex, 'sModS', toStr(tmpS.sMod), PATH_GIDB);
// Size, mincount and tolerance
  writeINI('GI_'+sIndex, 'MinCount', toStr(Self.MinCount), PATH_GIDB);
  writeINI('GI_'+sIndex, 'Height', toStr(Self.Height), PATH_GIDB);
  writeINI('GI_'+sIndex, 'Width', toStr(Self.Width), PATH_GIDB);
  writeINI('GI_'+sIndex, 'SizeTol', toStr(Self.SizeTol), PATH_GIDB);
end;

procedure TGroundItem.saveToDB(); overload;
begin
  Self.saveToDB(False);
end;

procedure loadGIDB();
var
  sIndex    : String;
  i,h,count : Integer;
  tmpGI     : TGroundItem;
begin
  sIndex := readINI('GroundItemDB_Main', 'Count', PATH_GIDB);
  if (strToInt(sIndex) < 1) then Exit;

  for i:=1 to strToInt(sIndex) do
  begin
    setArrayLength(LoadedGIList, Length(LoadedGIList)+1);

    with tmpGI do
    begin
      Name   := readINI('GI_'+toStr(i), 'Name', PATH_GIDB);

      PrimeCol.Col  := strToInt(readINI('GI_'+toStr(i), 'PCol', PATH_GIDB));
      PrimeCol.Tol  := strToInt(readINI('GI_'+toStr(i), 'PTol', PATH_GIDB));
      PrimeCol.hMod := strToFloat(readINI('GI_'+toStr(i), 'hModP', PATH_GIDB));
      PrimeCol.sMod := strToFloat(readINI('GI_'+toStr(i), 'sModP', PATH_GIDB));

      SecondCol.Col  := strToInt(readINI('GI_'+toStr(i), 'SCol', PATH_GIDB));
      SecondCol.Tol  := strToInt(readINI('GI_'+toStr(i), 'STol', PATH_GIDB));
      SecondCol.hMod := strToFloat(readINI('GI_'+toStr(i), 'hModS', PATH_GIDB));
      SecondCol.sMod := strToFloat(readINI('GI_'+toStr(i), 'sModS', PATH_GIDB));

      MinCount := strToInt(readINI('GI_'+toStr(i), 'MinCount', PATH_GIDB));
      Height   := strToInt(readINI('GI_'+toStr(i), 'Height', PATH_GIDB));
      Width    := strToInt(readINI('GI_'+toStr(i), 'Width', PATH_GIDB));
      SizeTol  := strToInt(readINI('GI_'+toStr(i), 'SizeTol', PATH_GIDB));
    end;

    LoadedGIList[High(LoadedGIList)] := tmpGI;
  end;

  if (strToInt(sIndex) >= 2) then
    warn('Loaded '+sIndex+' GroundItems.', WT_CORE)
  else
    warn('Loaded '+sIndex+' GroundItem.', WT_CORE);
end;

function getGroundItemByName(GIName: String): TGroundItem;
var
  i : Integer;
begin
  for i:=0 to high(LoadedGIList) do
    if (LoadedGIList[i].Name = GIName) then
      Exit(LoadedGIList[i]);
end;

function TGroundItem.findAll(DistMod: Integer; SortFrom: TPoint; var Pnts: TPointArray): Boolean;
var
  b       : TBox;
  i,h     : Integer;
  tpa,tmp : TPointArray;
  atpaP,
  atpaS   : T2DPointArray;
begin
  if not Self.PrimeCol.findAllIn(AREA_MS, tpa) then Exit(false);

  atpaP := clusterTPA(tpa, DistMod);
  tpa   := [];

  if Self.SecondCol.Col < 0 then
  begin
    for i:=0 to high(atpaP) do
    begin
      if length(atpaP[i]) > Self.MinCount then
      begin
        b := atpaP[i].Bounds();
        if (inRange(B.Height, Self.Height-SizeTol, Self.Height+SizeTol) and
            inRange(B.Height, Self.Width-SizeTol, Self.Width+SizeTol)) then
        begin
          setArrayLength(tpa, Length(tpa)+1);
          tpa[High(tpa)] := atpaP[i].midPnt();
        end;
      end;
    end;
  end else
  begin
    if not Self.SecondCol.findAllIn(AREA_MS, tpa) then Exit(false);

    atpaS := clusterTPA(tpa, DistMod);
    tpa   := [];

    for i:=0 to high(atpaP) do
      for h:=0 to high(atpaS) do
      begin
        tmp := CopyTPA(atpaP[i]);
        FilterTPADistTPA(tmp, 0, DistMod, atpaS[h]);
        if length(tmp) > 0 then
          if length(tmp) > Self.MinCount then
          begin
            b := tmp.Bounds();
            if (inRange(B.Height, Self.Height-SizeTol, Self.Height+SizeTol) and
                inRange(B.Height, Self.Width-SizeTol, Self.Width+SizeTol)) then
            begin
              setArrayLength(tpa, Length(tpa)+1);
              tpa[High(tpa)] := tmp.midPnt();
            end;
          end;
      end;
  end;

  if (length(tpa) < 1) then exit(false);
  result := true;
  sortTPAFrom(tpa, SortFrom);
  Pnts := tpa;
end;

function TGroundItem.findAll(var Pnts: TPointArray): Boolean; overload;
begin
  result := Self.findAll(5, point(MSCX,MSCY), Pnts);
end;

function TGroundItem.findNearest(var Pnt: TPoint): Boolean;
var
  Pnts : TPointArray;
begin
  result := Self.findAll(5, point(MSCX,MSCY), Pnts);
  if result then
    Pnt := Pnts[0];
end;

function TGroundItem.getAllBounds(): TBoxArray;
var
  b       : TBox;
  i,h     : Integer;
  tpa,tmp : TPointArray;
  atpaP,
  atpaS   : T2DPointArray;
begin
  if not Self.PrimeCol.findAllIn(AREA_MS, tpa) then Exit;

  atpaP := clusterTPA(tpa, 5);
  tpa   := [];

  if Self.SecondCol.Col < 0 then
  begin
    for i:=0 to high(atpaP) do
    begin
      if length(atpaP[i]) > Self.MinCount then
      begin
        b := atpaP[i].Bounds();
        if (inRange(B.Height, Self.Height-SizeTol, Self.Height+SizeTol) and
            inRange(B.Height, Self.Width-SizeTol, Self.Width+SizeTol)) then
        begin
          setArrayLength(result, Length(result)+1);
          result[High(result)] := atpaP[i].Bounds();
        end;
      end;
    end;
  end else
  begin
    if not Self.SecondCol.findAllIn(AREA_MS, tpa) then Exit;

    atpaS := clusterTPA(tpa, 5);
    tpa   := [];

    for i:=0 to high(atpaP) do
      for h:=0 to high(atpaS) do
      begin
        tmp := CopyTPA(atpaP[i]);
        FilterTPADistTPA(tmp, 0, 5, atpaS[h]);
        if length(tmp) > 0 then
          if length(tmp) > Self.MinCount then
          begin
            b := tmp.Bounds();
            if (inRange(B.Height, Self.Height-SizeTol, Self.Height+SizeTol) and
                inRange(B.Height, Self.Width-SizeTol, Self.Width+SizeTol)) then
            begin
              setArrayLength(result, Length(result)+1);
              result[High(result)] := atpaP[i].Bounds();
            end;
          end;
      end;
  end;
end;
